================================================================================
Without curly braces
================================================================================

/// Example service for widgets.
[http(url: "http://local.example.com/v1")]
[csharp(namespace: Facility.ExampleApi)]
service ExampleApi;

/// Gets widgets.
[http(method: GET, path: "/widgets")]
method getWidgets
{
	/// The query.
	[http(from: query, name: "q")]
	query: string;

	/// The limit of returned results.
	limit: int32;

	/// The sort field.
	sort: WidgetField;

	/// True to sort descending.
	desc: boolean;

	/// The maximum weight.
	[obsolete]
	maxWeight: double;
}:
{
	/// The widgets.
	widgets: Widget[];

	/// The total number of widgets.
	total: int64;

	/// The total weight.
	[obsolete]
	totalWeight: double;

	/// The pending job.
	[http(from: body, code: 202)]
	job: WidgetJob;
}

/// Creates a new widget.
[http(method: POST, path: "/widgets/", code: 201)]
method createWidget
{
	/// The widget to create.
	[http(from: body)]
	widget: Widget;
}:
{
	/// The created widget.
	[http(from: body)]
	widget: Widget;
}

/// Gets the specified widget.
[http(method: GET, path: "/widgets/{id}")]
method getWidget
{
	/// The widget ID.
	id: string;

	[http(from: header, name: "If-None-Match")]
	ifNoneMatch: string;
}:
{
	/// The requested widget.
	[http(from: body)]
	widget: Widget;

	[http(from: header)]
	eTag: string;

	[http(from: body, code: 304)]
	notModified: boolean;
}

/// Deletes the specified widget.
[http(method: DELETE, path: "/widgets/{id}", code: 204)]
method deleteWidget
{
	/// The widget ID.
	id: string;
}:
{
}

/// Edits widget.
[http(method: POST, path: "/widgets/{id}")]
method editWidget
{
	/// The widget ID.
	id: string;

	/// The operations.
	ops: object[];

	/// The new weight.
	[obsolete]
	weight: double;
}:
{
	/// The edited widget.
	[http(from: body, code: 200)]
	widget: Widget;

	/// The pending job.
	[http(from: body, code: 202)]
	job: WidgetJob;
}

/// Gets the specified widgets.
[http(method: POST, path: "/widgets/get")]
method getWidgetBatch
{
	/// The IDs of the widgets to return.
	ids: string[];
}:
{
	/// The widget results.
	results: result<Widget>[];
}

/// Gets the widget weight.
[obsolete]
[http(method: GET, path: "/widgets/{id}/weight")]
method getWidgetWeight
{
	/// The widget ID.
	id: string;
}:
{
	/// The widget weight.
	value: double;
}

/// Gets a widget preference.
[http(method: GET, path: "/prefs/{key}")]
method getPreference
{
	/// The preference key.
	key: string;
}:
{
	/// The preference value.
	[http(from: body)]
	value: Preference;
}

/// Sets a widget preference.
[http(method: PUT, path: "/prefs/{key}")]
method setPreference
{
	/// The preference key.
	key: string;

	/// The preference value.
	[http(from: body)]
	value: Preference;
}:
{
	/// The preference value.
	[http(from: body)]
	value: Preference;
}

/// Demonstrates the default HTTP behavior.
method notRestful
{
}:
{
}

method kitchen
{
	sink: KitchenSink;
}:
{
}

/// Custom errors.
errors ExampleApiErrors
{
	/// The user is not an administrator.
	[http(code: 403)]
	NotAdmin,
}

/// A widget.
data Widget
{
	/// A unique identifier for the widget.
	id: string;

	/// The name of the widget.
	name: string;

	/// The weight of the widget.
	[obsolete]
	weight: double;
}

/// A widget job.
data WidgetJob
{
	/// A unique identifier for the widget job.
	id: string;
}

/// A preference.
data Preference
{
	[csharp(name: "IsBoolean")]
	boolean: boolean;

	booleans: boolean[];

	double: double;

	doubles: double[];

	integer: int32;

	integers: int32[];

	string: string;

	strings: string[];

	bytes: bytes;

	byteses: bytes[];

	widgetField: WidgetField;

	widgetFields: WidgetField[];

	widget: Widget;

	widgets: Widget[];

	result: result<Widget>;

	results: result<Widget>[];

	bigInteger: int64;

	bigIntegers: int64[];

	decimal: decimal;

	decimals: decimal[];

	error: error;

	errors: error[];

	object: object;

	objects: object[];

	namedStrings: map<string>;

	namedWidgets: map<Widget>;
}

/// Identifies a widget field.
enum WidgetField
{
	/// The 'id' field.
	id,

	/// The 'name' field.
	name,

	/// The 'weight' field.
	[obsolete]
	weight,
}

/// An obsolete DTO.
[obsolete]
data ObsoleteData
{
	unused: boolean;
}

/// An obsolete enum.
[obsolete]
enum ObsoleteEnum
{
	unused,
}

data KitchenSink
{
	[obsolete, proto(id: 1)]
	oldField: string;
}

# ExampleApi

Additional service remarks.

## Heading

Use a primary heading to indicate the member name.

# getWidgets

Additional method remarks.

# Widget

Additional DTO remarks.

## Heading

Only top-level headings need to match a member name.

# WidgetField

Additional enum remarks.

--------------------------------------------------------------------------------

(source_file
  (doc_comment)
  (attribute
    (parameter
      (identifier)
      (string_literal)))
  (attribute
    (parameter
      (identifier)
      (identifier)
      (identifier)))
  (service
    (identifier)
    (comment)
    (method
      (attribute
        (parameter
          (identifier)
          (identifier))
        (parameter
          (identifier)
          (string_literal)))
      (identifier)
      (field_list
        (doc_comment)
        (field
          (attribute
            (parameter
              (identifier)
              (identifier))
            (parameter
              (identifier)
              (string_literal)))
          (identifier)
          (type))
        (doc_comment)
        (field
          (identifier)
          (type))
        (doc_comment)
        (field
          (identifier)
          (type
            (identifier)))
        (doc_comment)
        (field
          (identifier)
          (type))
        (doc_comment)
        (field
          (attribute)
          (identifier)
          (type)))
      (field_list
        (doc_comment)
        (field
          (identifier)
          (list_type
            (type
              (identifier))))
        (doc_comment)
        (field
          (identifier)
          (type))
        (doc_comment)
        (field
          (attribute)
          (identifier)
          (type))
        (doc_comment)
        (field
          (attribute
            (parameter
              (identifier)
              (identifier))
            (parameter
              (identifier)
              (number_literal)))
          (identifier)
          (type
            (identifier)))))
    (comment)
    (method
      (attribute
        (parameter
          (identifier)
          (identifier))
        (parameter
          (identifier)
          (string_literal))
        (parameter
          (identifier)
          (number_literal)))
      (identifier)
      (field_list
        (doc_comment)
        (field
          (attribute
            (parameter
              (identifier)
              (identifier)))
          (identifier)
          (type
            (identifier))))
      (field_list
        (doc_comment)
        (field
          (attribute
            (parameter
              (identifier)
              (identifier)))
          (identifier)
          (type
            (identifier)))))
    (comment)
    (method
      (attribute
        (parameter
          (identifier)
          (identifier))
        (parameter
          (identifier)
          (string_literal)))
      (identifier)
      (field_list
        (doc_comment)
        (field
          (identifier)
          (type))
        (field
          (attribute
            (parameter
              (identifier)
              (identifier))
            (parameter
              (identifier)
              (string_literal)))
          (identifier)
          (type)))
      (field_list
        (doc_comment)
        (field
          (attribute
            (parameter
              (identifier)
              (identifier)))
          (identifier)
          (type
            (identifier)))
        (field
          (attribute
            (parameter
              (identifier)
              (identifier)))
          (identifier)
          (type))
        (field
          (attribute
            (parameter
              (identifier)
              (identifier))
            (parameter
              (identifier)
              (number_literal)))
          (identifier)
          (type))))
    (comment)
    (method
      (attribute
        (parameter
          (identifier)
          (identifier))
        (parameter
          (identifier)
          (string_literal))
        (parameter
          (identifier)
          (number_literal)))
      (identifier)
      (field_list
        (doc_comment)
        (field
          (identifier)
          (type)))
      (field_list))
    (comment)
    (method
      (attribute
        (parameter
          (identifier)
          (identifier))
        (parameter
          (identifier)
          (string_literal)))
      (identifier)
      (field_list
        (doc_comment)
        (field
          (identifier)
          (type))
        (doc_comment)
        (field
          (identifier)
          (list_type
            (type)))
        (doc_comment)
        (field
          (attribute)
          (identifier)
          (type)))
      (field_list
        (doc_comment)
        (field
          (attribute
            (parameter
              (identifier)
              (identifier))
            (parameter
              (identifier)
              (number_literal)))
          (identifier)
          (type
            (identifier)))
        (doc_comment)
        (field
          (attribute
            (parameter
              (identifier)
              (identifier))
            (parameter
              (identifier)
              (number_literal)))
          (identifier)
          (type
            (identifier)))))
    (comment)
    (method
      (attribute
        (parameter
          (identifier)
          (identifier))
        (parameter
          (identifier)
          (string_literal)))
      (identifier)
      (field_list
        (doc_comment)
        (field
          (identifier)
          (list_type
            (type))))
      (field_list
        (doc_comment)
        (field
          (identifier)
          (list_type
            (template_type
              (type
                (identifier)))))))
    (comment)
    (method
      (attribute)
      (attribute
        (parameter
          (identifier)
          (identifier))
        (parameter
          (identifier)
          (string_literal)))
      (identifier)
      (field_list
        (doc_comment)
        (field
          (identifier)
          (type)))
      (field_list
        (doc_comment)
        (field
          (identifier)
          (type))))
    (comment)
    (method
      (attribute
        (parameter
          (identifier)
          (identifier))
        (parameter
          (identifier)
          (string_literal)))
      (identifier)
      (field_list
        (doc_comment)
        (field
          (identifier)
          (type)))
      (field_list
        (doc_comment)
        (field
          (attribute
            (parameter
              (identifier)
              (identifier)))
          (identifier)
          (type
            (identifier)))))
    (comment)
    (method
      (attribute
        (parameter
          (identifier)
          (identifier))
        (parameter
          (identifier)
          (string_literal)))
      (identifier)
      (field_list
        (doc_comment)
        (field
          (identifier)
          (type))
        (doc_comment)
        (field
          (attribute
            (parameter
              (identifier)
              (identifier)))
          (identifier)
          (type
            (identifier))))
      (field_list
        (doc_comment)
        (field
          (attribute
            (parameter
              (identifier)
              (identifier)))
          (identifier)
          (type
            (identifier)))))
    (comment)
    (method
      (identifier)
      (field_list)
      (field_list))
    (method
      (identifier)
      (field_list
        (field
          (identifier)
          (type
            (identifier))))
      (field_list))
    (comment)
    (error_set
      (identifier)
      (values_block
        (doc_comment)
        (attribute
          (parameter
            (identifier)
            (number_literal)))
        (identifier)))
    (comment)
    (dto
      (identifier)
      (field_list
        (doc_comment)
        (field
          (identifier)
          (type))
        (doc_comment)
        (field
          (identifier)
          (type))
        (doc_comment)
        (field
          (attribute)
          (identifier)
          (type))))
    (comment)
    (dto
      (identifier)
      (field_list
        (doc_comment)
        (field
          (identifier)
          (type))))
    (comment)
    (dto
      (identifier)
      (field_list
        (field
          (attribute
            (parameter
              (identifier)
              (string_literal)))
          (identifier)
          (type))
        (field
          (identifier)
          (list_type
            (type)))
        (field
          (identifier)
          (type))
        (field
          (identifier)
          (list_type
            (type)))
        (field
          (identifier)
          (type))
        (field
          (identifier)
          (list_type
            (type)))
        (field
          (identifier)
          (type))
        (field
          (identifier)
          (list_type
            (type)))
        (field
          (identifier)
          (type))
        (field
          (identifier)
          (list_type
            (type)))
        (field
          (identifier)
          (type
            (identifier)))
        (field
          (identifier)
          (list_type
            (type
              (identifier))))
        (field
          (identifier)
          (type
            (identifier)))
        (field
          (identifier)
          (list_type
            (type
              (identifier))))
        (field
          (identifier)
          (template_type
            (type
              (identifier))))
        (field
          (identifier)
          (list_type
            (template_type
              (type
                (identifier)))))
        (field
          (identifier)
          (type))
        (field
          (identifier)
          (list_type
            (type)))
        (field
          (identifier)
          (type))
        (field
          (identifier)
          (list_type
            (type)))
        (field
          (identifier)
          (type))
        (field
          (identifier)
          (list_type
            (type)))
        (field
          (identifier)
          (type))
        (field
          (identifier)
          (list_type
            (type)))
        (field
          (identifier)
          (template_type
            (type)))
        (field
          (identifier)
          (template_type
            (type
              (identifier))))))
    (comment)
    (enum
      (identifier)
      (values_block
        (doc_comment)
        (identifier)
        (doc_comment)
        (identifier)
        (doc_comment)
        (attribute)
        (identifier)))
    (comment)
    (dto
      (attribute)
      (identifier)
      (field_list
        (field
          (identifier)
          (type))))
    (comment)
    (enum
      (attribute)
      (identifier)
      (values_block
        (identifier)))
    (dto
      (identifier)
      (field_list
        (field
          (attribute
            (parameter
              (identifier)
              (number_literal)))
          (identifier)
          (type))))
    (remarks)))
